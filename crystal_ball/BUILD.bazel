package(default_visibility=["//visibility:public"])

exports_files(["tsconfig.json"], visibility = ["//visibility:public"])
exports_files(["rollup.config.js"], visibility = ["//visibility:public"])
exports_files(["index.html"], visibility = ["//visibility:public"])

load("@npm_bazel_rollup//:index.bzl",
  "rollup_bundle"
)
load(
  "@npm_bazel_typescript//:index.bzl",
  "ts_library",
  "ts_devserver"
)

ts_library(
  name = "game",
  srcs = glob(["src/main.ts"]),
  tsconfig = "//:tsconfig.json",
  devmode_target = "es2015",
  devmode_module = "es2015",
  prodmode_target = "es2015",
  prodmode_module = "es2015",
  deps = [
    "@npm//excalibur",
    "@npm//@types/lodash",
    "@npm//lodash",
  ]
)

rollup_bundle(
  name = "bundle",
  entry_point = "src/main.ts",
  config_file = "//:rollup.config.js",
  format = "iife",
  srcs = [":game"],
  deps = [
    ":game",
    "@npm//excalibur",
    "@npm//lodash",
    # Weird observation:
    # It seems that on NixOS 19.09
    # The bazel absration over node_modules
    # is 'leaky' -> builder is able to see
    # node_modules that should not be present
    # While on Ubuntu, he behaves correctly.
    "@npm//@rollup/plugin-commonjs",
    "@npm//@rollup/plugin-node-resolve",
    "@npm//@rollup/plugin-typescript",
  ],
)

filegroup(
  name = "js_libs",
  srcs = glob(
    include = [
      "node_modules/excalibur/dist/excalibur.min.js"
    ],
  ) + [
    "@lodash_release//file"
  ],
)

filegroup(
  name = "gfx_assets",
  srcs = glob(
    include = [
      "assets/**/*.png"
    ],
  )
)

ts_devserver(
  name = "devserver",
  deps = [],
  static_files = [
    "index.html",
    ":js_libs",
    ":gfx_assets",
    ":bundle"
  ],
)